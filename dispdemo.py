global termx #width
global termy #height
global termsizefallback #for the routine to alert the rest of the code that something went wrong while finding termsize
termsizefallback = False
termx,termy = 0,0
import os
import random
def termsize():
    try:
        print ("Getting term size")
        ts = os.get_terminal_size()
        global termx
        termx = ts.columns
        global termy
        termy = ts.lines
        print ("Term size:",termx,"×",termy) 
    except:
        print ("Terminal size error, using fallback")
        termx,termy = 80,24
        global termsizefallback
        termsizefallback = True
        print ("Term Size:80×24")

termsize() # we'll do this every time we refresh the screen

txtbuffer = ["a"] * (termy-2)

bitmap

topbar = "ajjj"
def loadtxtbuffer():
    for line in range (0,termy-2):
        txtbuffer[line] = bitmap[line*termx:(line+1)*termx].replace("0"," ").replace("1","█")  

def loadtxtbuffer2():
    for line in range (1,termy-2):
        currentline = ""
        #print (line)
        itline = line * 2 # index of the top line 
        ibline = line * 2 + 1 # index of the bottom line
        topline = bitmap [itline * termx:(itline+1)*termx]
        btmline = bitmap [ibline * termx:(ibline+1)*termx]
        for x in range (0,termx-1):
            #print (line,x)
            print (btmline)
            if btmline[x] == 0 and topline[x] == 0:
                currentline = currentline + " "
            if btmline[x] == 1 and topline[x] == 0:
                currentline = currentline + "▄"
            if btmline[x] == 0 and topline[x] == 1:
                currentline = currentline + "▀"
            if btmline[x] == 1 and topline[x] == 1:
                currentline = currentline + "█"
        txtbuffer[line] = currentline      
               
def dispy(topbar,ask,btmbar):
    loadtxtbuffer()
    print (topbar)
    for i in txtbuffer:
        print (i)
    if ask:
        input (">")
    else:
        print (btmbar)
dispy("topbar",False,"btmbar")

